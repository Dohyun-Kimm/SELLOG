/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/models/itemShop/chair.glb -t
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame, useThree } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Chair: THREE.Mesh;
    Circle: THREE.Mesh;
  };
  materials: {
    White: THREE.MeshStandardMaterial;
    Wood2: THREE.MeshStandardMaterial;
  };
};

type GLTFResultArrow = GLTF & {
  nodes: {
    Plane028: THREE.Mesh;
  };
  materials: {
    ["Material.004"]: THREE.MeshStandardMaterial;
  };
};

export function ChairEdit(props: JSX.IntrinsicElements["group"] | any) {
  const { nodes, materials } = useGLTF("/models/items/chair.glb") as GLTFResult;
  const arrow = useGLTF("/models/items/arrows.glb") as GLTFResultArrow;
  const arrowNodes = arrow.nodes;
  const arrowMaterials = arrow.materials;

  // 좌표 (서버에 저장된 좌표로 수정하기)
  const [position, setPosition] = useState({ x: 0, y: -2.5, z: 0 });
  const [isDragging, setIsDragging] = useState(false);

  // 회전 유무 판단
  const [isRotation, setIsRotation] = useState(false);

  // 회전 정보 (서버에 저장된 좌표로 수정하기)
  const [rotation, setRotation] = useState(0);

  const { scene, camera, gl } = useThree();
  const raycaster = new THREE.Raycaster();

  function intersect(pos: THREE.Vector2) {
    raycaster.setFromCamera(pos, camera);
    return raycaster.intersectObjects(scene.children);
  }

  // const dispatch = useAppDispatch();
  // const handlePositionUpdate = (
  //   id: number,
  //   x: string,
  //   y: string,
  //   z: string
  // ) => {
  //   dispatch(
  //     positionUpdate({
  //       diaryId: id,
  //       x: x,
  //       y: y,
  //       z: z,
  //     })
  //   );
  // };

  useEffect(() => {
    gl.domElement.addEventListener("click", () => {
      if (isDragging) {
        setIsDragging(false);
      }
    });

    // const handleWindowClick = (e: MouseEvent) => {
    //   if (isDragging) {
    //     setIsDragging(false);
    //   }
    // };
  }, [isDragging]);

  useFrame(({ mouse }) => {
    if (isDragging) {
      const found = intersect(mouse);

      if (found.length > 0) {
        for (let i = 0; i < found.length; i++) {
          if (!found[i].object.userData.ground) continue;

          // 물체가 마우스와 만난 지점으로 위치를 업데이트하기
          const newPosition = found[i].point;
          setPosition({ x: newPosition.x, y: -2.5, z: newPosition.z });
          break;
        }
      }
    }
  });

  // 물체를 회전시키는 함수
  const handleRotation = () => {
    setRotation((rotation + 10) % 360);
  };

  return (
    <>
      <group
        {...props}
        dispose={null}
        position={[position.x, position.y, position.z]}
        scale={0.8}
        userData={{ draggable: true, name: "chair", aa: true }}
        onClick={() => {
          if (!isDragging) setIsDragging(true);
          if (!isRotation) setIsRotation(true);
        }}
        rotation={[0, THREE.MathUtils.degToRad(rotation), 0]}
      >
        <mesh
          geometry={nodes.Chair.geometry}
          material={materials.White}
          rotation={[0, 0.99, 0]}
          scale={0.86}
          userData={{ name: "chair" }}
        >
          <mesh
            geometry={nodes.Circle.geometry}
            material={materials.Wood2}
            position={[0.14, 0, 0]}
            userData={{ name: "chair" }}
          />
        </mesh>
      </group>
      {isRotation && (
        <mesh
          geometry={arrowNodes.Plane028.geometry}
          material={arrowMaterials["Material.004"]}
          position={[-10, -10, 0]}
          rotation={[-Math.PI / 1.6, 0, Math.PI / 4]}
          scale={0.12}
          onClick={handleRotation}
        />
      )}
    </>
  );
}

useGLTF.preload("/models/items/chair.glb");
