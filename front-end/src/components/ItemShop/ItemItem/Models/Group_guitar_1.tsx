/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/models/items/group_guitar_1.glb -t
*/

import * as THREE from "three";
import React, { useRef, useState, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useRecoilState } from "recoil";
import { itemTargetState, myItemsState } from "@/recoil/myroom/atoms";
import { useFrame, useThree } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Stand001: THREE.Mesh;
    Plane056: THREE.Mesh;
    Vert003: THREE.Mesh;
    Circle002: THREE.Mesh;
    Circle003: THREE.Mesh;
    Circle004: THREE.Mesh;
    Circle005: THREE.Mesh;
    Circle006: THREE.Mesh;
    Cylinder: THREE.Mesh;
    Cylinder001: THREE.Mesh;
    Cylinder002: THREE.Mesh;
    Cylinder003: THREE.Mesh;
    Cylinder004: THREE.Mesh;
    Cylinder005: THREE.Mesh;
    Cylinder006: THREE.Mesh;
    Plane035: THREE.Mesh;
    Plane036: THREE.Mesh;
    Plane037: THREE.Mesh;
    Plane038: THREE.Mesh;
    Plane039: THREE.Mesh;
    Plane040: THREE.Mesh;
    Plane042: THREE.Mesh;
    Vert004: THREE.Mesh;
    Vert005: THREE.Mesh;
    Vert007: THREE.Mesh;
    Vert009: THREE.Mesh;
    Vert010: THREE.Mesh;
    Vert011: THREE.Mesh;
    Vert021: THREE.Mesh;
    Vert013: THREE.Mesh;
    Circle007: THREE.Mesh;
    Circle008: THREE.Mesh;
    Circle009: THREE.Mesh;
    Circle010: THREE.Mesh;
    Circle011: THREE.Mesh;
    Cylinder007: THREE.Mesh;
    Cylinder008: THREE.Mesh;
    Cylinder009: THREE.Mesh;
    Cylinder010: THREE.Mesh;
    Cylinder011: THREE.Mesh;
    Cylinder012: THREE.Mesh;
    Cylinder013: THREE.Mesh;
    Plane041: THREE.Mesh;
    Plane043: THREE.Mesh;
    Plane044: THREE.Mesh;
    Plane045: THREE.Mesh;
    Plane046: THREE.Mesh;
    Plane047: THREE.Mesh;
    Plane048: THREE.Mesh;
    Vert008: THREE.Mesh;
    Vert014: THREE.Mesh;
    Vert017: THREE.Mesh;
    Circle012: THREE.Mesh;
    Circle013: THREE.Mesh;
    Cylinder014: THREE.Mesh;
    Cylinder015: THREE.Mesh;
    Cylinder017: THREE.Mesh;
    Cylinder020: THREE.Mesh;
    Cylinder022: THREE.Mesh;
    Cylinder024: THREE.Mesh;
    Cylinder016: THREE.Mesh;
    Cylinder018: THREE.Mesh;
    Cylinder019: THREE.Mesh;
    Cylinder021: THREE.Mesh;
    Cylinder023: THREE.Mesh;
    Cylinder025: THREE.Mesh;
    Plane049: THREE.Mesh;
    Plane050: THREE.Mesh;
    Plane051: THREE.Mesh;
    Plane052: THREE.Mesh;
    Plane053: THREE.Mesh;
    Plane054: THREE.Mesh;
    Plane055: THREE.Mesh;
    Vert006: THREE.Mesh;
    Vert018: THREE.Mesh;
    Vert019: THREE.Mesh;
    Vert020: THREE.Mesh;
    Vert029: THREE.Mesh;
    Circle026: THREE.Mesh;
    Circle027: THREE.Mesh;
    Circle028: THREE.Mesh;
    Circle029: THREE.Mesh;
    Circle030: THREE.Mesh;
    Cylinder052: THREE.Mesh;
    Plane081: THREE.Mesh;
    Plane083: THREE.Mesh;
    Plane084: THREE.Mesh;
    Plane085: THREE.Mesh;
    Vert030: THREE.Mesh;
    Vert031: THREE.Mesh;
    Cylinder053: THREE.Mesh;
    Cylinder054: THREE.Mesh;
    Cylinder055: THREE.Mesh;
    Cylinder056: THREE.Mesh;
    Cylinder057: THREE.Mesh;
    Cylinder058: THREE.Mesh;
    Plane079: THREE.Mesh;
    Plane080: THREE.Mesh;
    Plane082: THREE.Mesh;
  };
  materials: {
    Metal: THREE.MeshStandardMaterial;
    Brass: THREE.MeshStandardMaterial;
    Chrome: THREE.MeshStandardMaterial;
    Neck: THREE.MeshStandardMaterial;
    ["Black.002"]: THREE.MeshStandardMaterial;
    ["default"]: THREE.MeshStandardMaterial;
    Cream: THREE.MeshStandardMaterial;
    ["Metal.001"]: THREE.MeshStandardMaterial;
    Rubber: THREE.MeshStandardMaterial;
    White: THREE.MeshStandardMaterial;
    Black: THREE.MeshStandardMaterial;
    ["default"]: THREE.MeshStandardMaterial;
    Wood: THREE.MeshStandardMaterial;
    ["default"]: THREE.MeshStandardMaterial;
  };
};

export function Group_guitar_1(props: JSX.IntrinsicElements["group"] | any) {
  const { nodes, materials } = useGLTF(
    "/models/items/group_guitar_1.glb"
  ) as GLTFResult;

  const [propsX, propsY, propsZ] = props.position;
  const propsDeg = props.deg;

  // 좌표 (서버에 저장된 좌표로 수정하기)
  const [position, setPosition] = useState({ x: propsX, y: propsY, z: propsZ });
  const [isDragging, setIsDragging] = useState(false);

  // 회전 정보 (서버에 저장된 좌표로 수정하기)
  const [rotation, setRotation] = useState(propsDeg);

  // 타겟 정보
  const [target, setTarget] = useRecoilState(itemTargetState);

  const { scene, camera, gl } = useThree();
  const raycaster = new THREE.Raycaster();

  function intersect(pos: THREE.Vector2) {
    raycaster.setFromCamera(pos, camera);
    return raycaster.intersectObjects(scene.children);
  }

  const [myItems, setMyItems] = useRecoilState(myItemsState);

  const updateTagetItemPosition = (
    id: number,
    x: number | null,
    y: number | null,
    z: number | null,
    deg: number | null
  ) => {
    myItems.forEach((item, i) => {
      // itemId가 일치하는 아이템 선별
      if (item.itemId === id) {
        // 변화된 포지션 저장
        let newItemPosition = {
          ...item,
          x,
          y,
          z,
          deg,
        };
        // 불변성 유지를 위한 새로운 배열 생성
        const newItems = [...myItems];
        newItems[i] = newItemPosition;

        // 새로운 배열을 atom에 저장
        setMyItems(newItems);
      }
    });
  };

  useEffect(() => {
    const handleWindowClick = (e: MouseEvent) => {
      if (isDragging) {
        setIsDragging(false);
      }
    };

    if (props.activePage === "myitems") {
      gl.domElement.addEventListener("click", handleWindowClick);

      // atom에 변화된 포지션 저장
      updateTagetItemPosition(
        props.itemId,
        position.x,
        position.y,
        position.z,
        rotation
      );
    }

    return () => {
      if (props.activePage === "myitems") {
        gl.domElement.removeEventListener("click", handleWindowClick);
      }
    };
  }, [isDragging]);

  useFrame(({ mouse }) => {
    if (props.activePage === "myitems") {
      if (isDragging) {
        const found = intersect(mouse);

        if (found.length > 0) {
          for (let i = 0; i < found.length; i++) {
            if (!found[i].object.userData.ground) continue;

            // 물체가 마우스와 만난 지점으로 위치를 업데이트하기
            const newPosition = found[i].point;
            setPosition({ x: newPosition.x, y: position.y, z: newPosition.z });
            break;
          }
        }
      }
    }
  });

  // 물체 회전
  if (
    props.rotationLeftButtonRef.current &&
    props.rotationRigthButtonRef.current &&
    props.upButtonRef.current &&
    props.downButtonRef.current &&
    props.deleteButtonRef.current
  ) {
    const leftRotation = () => {
      let newRotation = (rotation - 10) % 360;
      setRotation(newRotation);
    };

    const rightRotation = () => {
      let newRotation = (rotation + 10) % 360;
      setRotation(newRotation);
    };

    const positionUp = () => {
      if (position.y < 3) {
        const newY = Number(position.y) + 0.2;
        setPosition({ x: position.x, y: newY, z: position.z });
      }
    };

    const positionDown = () => {
      if (position.y > -2.5) {
        const newY = Number(position.y) - 0.2;
        setPosition({ x: position.x, y: newY, z: position.z });
      }
    };

    const itemDelete = () => {
      updateTagetItemPosition(props.itemId, null, null, null, null);
    };

    if (target === "Group_guitar_1") {
      props.rotationLeftButtonRef.current.addEventListener(
        "click",
        leftRotation
      );
      props.rotationRigthButtonRef.current.addEventListener(
        "click",
        rightRotation
      );
      props.upButtonRef.current.addEventListener("click", positionUp);
      props.downButtonRef.current.addEventListener("click", positionDown);
      props.deleteButtonRef.current.addEventListener("click", itemDelete);
    } else {
      props.rotationLeftButtonRef.current.removeEventListener(
        "click",
        leftRotation
      );
      props.rotationRigthButtonRef.current.removeEventListener(
        "click",
        rightRotation
      );
      props.deleteButtonRef.current.removeEventListener("click", itemDelete);
    }
  }

  return (
    <group
      {...props}
      dispose={null}
      position={[position.x, position.y, position.z]}
      userData={{ draggable: true, name: "Group_guitar_1" }}
      onClick={() => {
        if (props.activePage === "myitems") {
          if (!isDragging) setIsDragging(true);
          setTarget("Group_guitar_1");
        }
      }}
      rotation={[0, THREE.MathUtils.degToRad(rotation), 0]}
    >
      <mesh
        geometry={nodes.Stand001.geometry}
        material={materials.Metal}
        scale={1.15}
      >
        <mesh
          geometry={nodes.Plane056.geometry}
          material={materials.Metal}
          position={[0, 0.18, 0]}
          scale={0.92}
        />
        <mesh
          geometry={nodes.Vert003.geometry}
          material={materials.Brass}
          position={[0.67, 1.03, 0.14]}
          rotation={[-2.91, 0, -Math.PI / 2]}
          scale={1.03}
        >
          <mesh
            geometry={nodes.Circle002.geometry}
            material={materials.Chrome}
            position={[-0.58, 0.01, 0.16]}
          />
          <mesh
            geometry={nodes.Circle003.geometry}
            material={materials.Chrome}
            position={[-0.52, 0.01, 0.27]}
          />
          <mesh
            // geometry={nodes.Circle004.geometry}
            material={materials.Chrome}
            position={[-0.71, 0.01, 0.15]}
          />
          <mesh
            geometry={nodes.Circle005.geometry}
            material={materials.Chrome}
            position={[-0.66, 0.01, 0.26]}
          />
          <mesh
            // geometry={nodes.Circle006.geometry}
            material={materials.Chrome}
            position={[-0.04, 0.02, -0.16]}
          />
          <mesh
            // geometry={nodes.Cylinder.geometry}
            material={materials.Chrome}
            position={[-0.04, 0.02, -0.16]}
          />
          <mesh
            // geometry={nodes.Cylinder001.geometry}
            material={materials.Chrome}
            position={[1.08, 0, -0.07]}
          />
          <mesh
            // geometry={nodes.Cylinder002.geometry}
            material={materials.Chrome}
            position={[1.15, -0.01, -0.07]}
          />
          <mesh
            // geometry={nodes.Cylinder003.geometry}
            material={materials.Chrome}
            position={[1.22, -0.01, -0.07]}
          />
          <mesh
            // geometry={nodes.Cylinder004.geometry}
            material={materials.Chrome}
            position={[1.08, 0.02, -0.05]}
            rotation={[0, 0, -0.1]}
          />
          <mesh
            // geometry={nodes.Cylinder005.geometry}
            material={materials.Chrome}
            position={[1.15, 0.02, -0.05]}
            rotation={[0, 0, -0.1]}
          />
          <mesh
            geometry={nodes.Cylinder006.geometry}
            material={materials.Chrome}
            position={[1.22, 0.01, -0.05]}
            rotation={[0, 0, -0.1]}
          />
          <mesh
            geometry={nodes.Plane035.geometry}
            material={materials.Neck}
            position={[0, 0.03, 0]}
          />
          <mesh
            geometry={nodes.Plane036.geometry}
            material={materials["Black.002"]}
            position={[0.96, 0.03, 0]}
            rotation={[0, 0, -0.1]}
          />
          <mesh
            geometry={nodes.Plane037.geometry}
            material={materials.Chrome}
            position={[-0.14, 0.02, 0]}
          />
          <mesh
            geometry={nodes.Plane038.geometry}
            material={materials.Chrome}
            position={[-0.55, 0.02, 0]}
          />
          <mesh
            geometry={nodes.Plane039.geometry}
            material={materials.Chrome}
            position={[-0.46, 0.02, 0]}
          />
          <mesh
            geometry={nodes.Plane040.geometry}
            material={materials["default"]}
            position={[0, 0.03, 0]}
          />
          <mesh
            // geometry={nodes.Plane042.geometry}
            material={materials.Chrome}
            position={[0, 0.03, 0]}
          />
          <mesh
            // geometry={nodes.Vert004.geometry}
            material={materials.Cream}
            position={[-0.27, 0.02, 0.13]}
          />
          <mesh
            geometry={nodes.Vert005.geometry}
            material={materials["Metal.001"]}
            position={[-0.46, 0.04, -0.06]}
          />
        </mesh>
        <mesh
          geometry={nodes.Vert007.geometry}
          material={materials.Rubber}
          position={[0.37, 1.77, 0.38]}
          scale={0.92}
        />
        <mesh
          geometry={nodes.Vert009.geometry}
          material={materials.Rubber}
          position={[0.01, 1.77, 0.38]}
          scale={0.92}
        />
        <mesh
          geometry={nodes.Vert010.geometry}
          material={materials.Rubber}
          position={[-0.36, 1.77, 0.38]}
          scale={0.92}
        />
        <mesh
          geometry={nodes.Vert011.geometry}
          material={materials.Rubber}
          position={[-0.73, 1.77, 0.38]}
          scale={0.92}
        />
        <mesh
          geometry={nodes.Vert021.geometry}
          material={materials.Rubber}
          position={[0.74, 1.77, 0.38]}
          scale={0.92}
        />
        <mesh
          geometry={nodes.Vert013.geometry}
          material={materials.White}
          position={[-0.41, 0.58, 0.01]}
          rotation={[-2.89, 0, -Math.PI / 2]}
          scale={1.03}
        >
          <mesh
            geometry={nodes.Circle007.geometry}
            material={materials["Metal.001"]}
            position={[-0.2, -0.01, 0.18]}
          />
          <mesh
            geometry={nodes.Circle008.geometry}
            material={materials["Metal.001"]}
            position={[-0.2, -0.01, 0.27]}
          />
          <mesh
            geometry={nodes.Circle009.geometry}
            material={materials["Metal.001"]}
            position={[-0.29, -0.01, 0.16]}
          />
          <mesh
            geometry={nodes.Circle010.geometry}
            material={materials["Metal.001"]}
            position={[-0.3, -0.01, 0.24]}
          />
          <mesh
            geometry={nodes.Circle011.geometry}
            material={materials.Black}
            position={[-0.1, 0, 0.23]}
          />
          <mesh
            geometry={nodes.Cylinder007.geometry}
            material={materials.Chrome}
            position={[-0.1, 0, 0.23]}
          />
          <mesh
            geometry={nodes.Cylinder008.geometry}
            material={materials.Chrome}
            position={[1.54, -0.02, -0.07]}
          />
          <mesh
            geometry={nodes.Cylinder009.geometry}
            material={materials.Chrome}
            position={[1.61, -0.03, -0.06]}
          />
          <mesh
            geometry={nodes.Cylinder010.geometry}
            material={materials.Chrome}
            position={[1.68, -0.03, -0.06]}
          />
          <mesh
            geometry={nodes.Cylinder011.geometry}
            material={materials.Chrome}
            position={[1.54, 0, -0.05]}
            rotation={[0, 0, -0.1]}
          />
          <mesh
            geometry={nodes.Cylinder012.geometry}
            material={materials.Chrome}
            position={[1.61, -0.01, -0.05]}
            rotation={[0, 0, -0.1]}
          />
          <mesh
            geometry={nodes.Cylinder013.geometry}
            material={materials.Chrome}
            position={[1.68, -0.01, -0.05]}
            rotation={[0, 0, -0.1]}
          />
          <mesh
            geometry={nodes.Plane041.geometry}
            material={materials.Neck}
            position={[0.46, 0.01, 0]}
          />
          <mesh
            geometry={nodes.Plane043.geometry}
            material={materials["Black.002"]}
            position={[1.43, 0.01, 0]}
            rotation={[0, 0, -0.1]}
          />
          <mesh
            geometry={nodes.Plane044.geometry}
            material={materials.Chrome}
            position={[0.33, 0, 0]}
          />
          <mesh
            geometry={nodes.Plane045.geometry}
            material={materials.Chrome}
            position={[-0.09, 0, 0]}
          />
          <mesh
            geometry={nodes.Plane046.geometry}
            material={materials.Chrome}
          />
          <mesh
            geometry={nodes.Plane047.geometry}
            material={materials["default"]}
            position={[0.46, 0.01, 0]}
          />
          <mesh
            geometry={nodes.Plane048.geometry}
            material={materials.Chrome}
            position={[0.46, 0.01, 0]}
          />
          <mesh
            geometry={nodes.Vert008.geometry}
            material={materials["Metal.001"]}
            position={[0, 0.02, -0.06]}
          />
          <mesh
            geometry={nodes.Vert014.geometry}
            material={materials["Black.002"]}
            position={[-0.03, 0, -0.15]}
          />
        </mesh>
        <mesh
          geometry={nodes.Vert017.geometry}
          material={materials.Wood}
          position={[-0.03, 0.99, 0.1]}
          rotation={[-2.88, 0, -Math.PI / 2]}
          scale={1.03}
        >
          <mesh
            geometry={nodes.Circle012.geometry}
            material={materials.White}
            position={[-0.48, -0.02, 0.22]}
          />
          <mesh
            geometry={nodes.Circle013.geometry}
            material={materials.White}
            position={[-0.54, -0.02, 0.29]}
          />
          <mesh
            geometry={nodes.Cylinder014.geometry}
            material={materials.Chrome}
            position={[1.08, -0.01, -0.04]}
            rotation={[0, -0.3, 0]}
            scale={0.93}
          />
          <mesh
            geometry={nodes.Cylinder015.geometry}
            material={materials.Chrome}
            position={[1.03, -0.01, -0.06]}
            rotation={[0, -0.3, 0]}
            scale={0.93}
          />
          <mesh
            geometry={nodes.Cylinder017.geometry}
            material={materials.Chrome}
            position={[1.13, -0.01, -0.03]}
            rotation={[0, -0.3, 0]}
            scale={0.93}
          />
          <mesh
            geometry={nodes.Cylinder020.geometry}
            material={materials.Chrome}
            position={[1.18, -0.01, -0.01]}
            rotation={[0, -0.3, 0]}
            scale={0.93}
          />
          <mesh
            geometry={nodes.Cylinder022.geometry}
            material={materials.Chrome}
            position={[1.22, -0.01, 0]}
            rotation={[0, -0.3, 0]}
            scale={0.93}
          />
          <mesh
            geometry={nodes.Cylinder024.geometry}
            material={materials.Chrome}
            position={[1.27, -0.01, 0.02]}
            rotation={[0, -0.3, 0]}
            scale={0.93}
          />
          <mesh
            geometry={nodes.Cylinder016.geometry}
            material={materials.Chrome}
            position={[1.07, 0, -0.03]}
            scale={0.93}
          />
          <mesh
            geometry={nodes.Cylinder018.geometry}
            material={materials.Chrome}
            position={[1.02, 0, -0.05]}
            scale={0.93}
          />
          <mesh
            geometry={nodes.Cylinder019.geometry}
            material={materials.Chrome}
            position={[1.12, 0, -0.01]}
            scale={0.93}
          />
          <mesh
            geometry={nodes.Cylinder021.geometry}
            material={materials.Chrome}
            position={[1.17, 0, 0]}
            scale={0.93}
          />
          <mesh
            geometry={nodes.Cylinder023.geometry}
            material={materials.Chrome}
            position={[1.22, 0, 0.02]}
            scale={0.93}
          />
          <mesh
            geometry={nodes.Cylinder025.geometry}
            material={materials.Chrome}
            position={[1.27, 0, 0.03]}
            scale={0.93}
          />
          <mesh geometry={nodes.Plane049.geometry} material={materials.Neck} />
          <mesh
            geometry={nodes.Plane050.geometry}
            material={materials.Chrome}
            position={[-0.53, -0.01, 0]}
          />
          <mesh
            geometry={nodes.Plane051.geometry}
            material={materials.White}
            position={[-0.42, 0, 0]}
            rotation={[0, -0.17, 0]}
          />
          <mesh
            geometry={nodes.Plane052.geometry}
            material={materials.White}
            position={[-0.29, 0, 0]}
          />
          <mesh
            geometry={nodes.Plane053.geometry}
            material={materials.White}
            position={[-0.15, 0, 0]}
          />
          <mesh
            geometry={nodes.Plane054.geometry}
            material={materials["default"]}
          />
          <mesh
            geometry={nodes.Plane055.geometry}
            material={materials.Chrome}
          />
          <mesh
            geometry={nodes.Vert006.geometry}
            material={materials["Metal.001"]}
            position={[-0.46, 0.01, -0.06]}
          />
          <mesh
            geometry={nodes.Vert018.geometry}
            material={materials.Cream}
            position={[-0.37, -0.01, 0]}
          />
          <mesh
            geometry={nodes.Vert019.geometry}
            material={materials.Wood}
            position={[0.97, 0, 0]}
          />
        </mesh>
        <mesh
          geometry={nodes.Vert020.geometry}
          material={materials.Metal}
          scale={0.92}
        />
        <mesh
          geometry={nodes.Vert029.geometry}
          material={materials["Black.002"]}
          position={[0.3, 1.03, 0.14]}
          rotation={[-2.91, 0, -Math.PI / 2]}
          scale={1.03}
        >
          <mesh
            geometry={nodes.Circle026.geometry}
            material={materials.Chrome}
            position={[-0.58, 0.01, 0.16]}
          />
          <mesh
            geometry={nodes.Circle027.geometry}
            material={materials.Chrome}
            position={[-0.52, 0.01, 0.27]}
          />
          <mesh
            geometry={nodes.Circle028.geometry}
            material={materials.Chrome}
            position={[-0.71, 0.01, 0.15]}
          />
          <mesh
            geometry={nodes.Circle029.geometry}
            material={materials.Chrome}
            position={[-0.66, 0.01, 0.26]}
          />
          <mesh
            geometry={nodes.Circle030.geometry}
            material={materials.Chrome}
            position={[-0.04, 0.02, -0.16]}
          />
          <mesh
            geometry={nodes.Cylinder052.geometry}
            material={materials.Chrome}
            position={[-0.04, 0.02, -0.16]}
          />
          <mesh
            geometry={nodes.Plane081.geometry}
            material={materials.Chrome}
            position={[-0.14, 0.02, 0]}
          />
          <mesh
            geometry={nodes.Plane083.geometry}
            material={materials.Chrome}
            position={[-0.46, 0.02, 0]}
          />
          <mesh
            geometry={nodes.Plane084.geometry}
            material={materials["default"]}
            position={[0, 0.03, 0]}
          />
          <mesh
            geometry={nodes.Plane085.geometry}
            material={materials.Chrome}
            position={[0, 0.03, 0]}
          />
          <mesh
            geometry={nodes.Vert030.geometry}
            material={materials.Cream}
            position={[-0.27, 0.02, 0.13]}
          />
          <mesh
            geometry={nodes.Vert031.geometry}
            material={materials["Metal.001"]}
            position={[-0.46, 0.04, -0.06]}
          />
          <mesh
            geometry={nodes.Cylinder053.geometry}
            material={materials.Chrome}
            position={[1.08, 0, -0.07]}
          />
          <mesh
            geometry={nodes.Cylinder054.geometry}
            material={materials.Chrome}
            position={[1.15, -0.01, -0.07]}
          />
          <mesh
            geometry={nodes.Cylinder055.geometry}
            material={materials.Chrome}
            position={[1.22, -0.01, -0.07]}
          />
          <mesh
            geometry={nodes.Cylinder056.geometry}
            material={materials.Chrome}
            position={[1.08, 0.02, -0.05]}
            rotation={[0, 0, -0.1]}
          />
          <mesh
            geometry={nodes.Cylinder057.geometry}
            material={materials.Chrome}
            position={[1.15, 0.02, -0.05]}
            rotation={[0, 0, -0.1]}
          />
          <mesh
            geometry={nodes.Cylinder058.geometry}
            material={materials.Chrome}
            position={[1.22, 0.01, -0.05]}
            rotation={[0, 0, -0.1]}
          />
          <mesh
            geometry={nodes.Plane079.geometry}
            material={materials.Neck}
            position={[0, 0.03, 0]}
          />
          <mesh
            geometry={nodes.Plane080.geometry}
            material={materials["Black.002"]}
            position={[0.96, 0.03, 0]}
            rotation={[0, 0, -0.1]}
          />
          <mesh
            geometry={nodes.Plane082.geometry}
            material={materials.Chrome}
            position={[-0.55, 0.02, 0]}
          />
        </mesh>
      </mesh>
    </group>
  );
}

// useGLTF.preload("/models/items/group_guitar_1.glb");
