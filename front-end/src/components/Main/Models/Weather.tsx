/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/models/weather.glb -t
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, PerspectiveCamera, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Roundcube008: THREE.Mesh;
    Roundcube009: THREE.Mesh;
    Roundcube010: THREE.Mesh;
    Roundcube011: THREE.Mesh;
    Roundcube012: THREE.Mesh;
    Roundcube002: THREE.Mesh;
    Roundcube003: THREE.Mesh;
    Roundcube001: THREE.Mesh;
    Roundcube004: THREE.Mesh;
    Roundcube005: THREE.Mesh;
    Roundcube006: THREE.Mesh;
    Roundcube007: THREE.Mesh;
    Curve: THREE.Mesh;
  };
  materials: {
    ["Material.004"]: THREE.MeshPhysicalMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
  };
};

export function Weather(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group | any>();
  const { nodes, materials } = useGLTF("/models/weather.glb") as GLTFResult;

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group
          name="Area"
          position={[0, 3.23, 0.79]}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <group
          name="Area001"
          position={[0.54, -3.36, 1.32]}
          rotation={[1.41, 0.16, 3.14]}
        />

        <mesh
          name="Roundcube002"
          geometry={nodes.Roundcube002.geometry}
          material={materials["Material.003"]}
          position={[-0.66, 0.45, -1.45]}
          rotation={[0, 0, Math.PI / 2]}
          scale={0.56}
        ></mesh>
        <mesh
          name="Curve"
          geometry={nodes.Curve.geometry}
          material={materials["Material.002"]}
          rotation={[Math.PI / 2, -0.02, 0]}
          scale={0.95}
        />
      </group>
    </group>
  );
}
