/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/models/characters/f3.glb -t
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useLocation } from "react-router-dom";

type GLTFResult = GLTF & {
  nodes: {
    f_12: THREE.SkinnedMesh;
    root: THREE.Bone;
    ["MCH-torsoparent"]: THREE.Bone;
  };
  materials: {
    characters: THREE.MeshStandardMaterial;
  };
};

type ActionName = "Idle" | "Run" | "Sad" | "Song Jump" | "Walk" | "Win";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export function F3_Main(props: JSX.IntrinsicElements["group"] | any) {
  const group = useRef<THREE.Group | any>();
  const { nodes, materials, animations } = useGLTF(
    "/models/characters/f3.glb"
  ) as GLTFResult;
  const { actions } = useAnimations<GLTFActions | any>(animations, group);

  const location = useLocation();
  const currentPath = location.pathname;

  return (
    <group
      ref={props.group}
      dispose={null}
      // position={currentPath.includes("csQuizMap") ? [-2, 0.2, 0] : [0, 0.2, 0]}
      position={[0, 0.2, 0]}
    >
      <group name="Scene">
        <group
          name="rig"
          // position={[0, -0.17, 0]}
          position={
            !currentPath.includes("csQuizMap")
              ? [0, -0.17, 0]
              : props.isLeft < 0
              ? [-2, -0.17, 0]
              : [2, -0.17, 0]
          }
          castShadow={true}
          receiveShadow={true}
          ref={props.userModelRef}
        >
          <primitive object={nodes.root} />
          <primitive object={nodes["MCH-torsoparent"]} />
          <skinnedMesh
            name="f_12"
            geometry={nodes.f_12.geometry}
            material={materials.characters}
            skeleton={nodes.f_12.skeleton}
            castShadow={true}
            receiveShadow={true}
          />
        </group>
      </group>
    </group>
  );
}
