/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/models/clouds.glb -t
*/

import * as THREE from "three";
import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { gsap } from "gsap";

type GLTFResult = GLTF & {
  nodes: {
    Mesh: THREE.Mesh;
    Mesh_1: THREE.Mesh;
    Circle: THREE.Mesh;
    Circle001: THREE.Mesh;
    Circle002: THREE.Mesh;
    Sphere001: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    ["Material.004"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
  };
};

type ActionName =
  | "EmptyAction"
  | "SphereAction"
  | "Circle"
  | "Circle.001"
  | "Circle.002"
  | "Sphere.001";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export function AirBalloon(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group | any>();
  const { nodes, materials, animations } = useGLTF(
    "/models/clouds.glb"
  ) as GLTFResult;
  const { actions } = useAnimations<GLTFActions | any>(animations, group);

  useEffect(() => {
    if (group.current?.position) {
      gsap
        .to(group.current.position, {
          duration: 2,
          y: 6,
        })
        .then(() => {
          gsap.to(group.current.position, {
            duration: 2,
            y: 5,
          });
        });
    }
    const timeInterval = setInterval(() => {
      if (group.current?.position) {
        gsap
          .to(group.current.position, {
            duration: 2,
            y: 6,
          })
          .then(() => {
            gsap.to(group.current.position, {
              duration: 2,
              y: 5,
            });
          });
      }
    }, 5000);

    return () => clearInterval(timeInterval);
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Empty" />
        <group name="Sphere" position={[-0.58, 0.53, 0.06]} scale={1.17}>
          <mesh
            name="Mesh"
            geometry={nodes.Mesh.geometry}
            material={materials["Material.001"]}
            castShadow={true}
          />
          <mesh
            name="Mesh_1"
            geometry={nodes.Mesh_1.geometry}
            material={materials["Material.002"]}
            castShadow={true}
          />
          <mesh
            name="Circle"
            geometry={nodes.Circle.geometry}
            material={materials["Material.004"]}
            position={[0, -1.81, 0]}
            castShadow={true}
          />
          <mesh
            name="Circle001"
            geometry={nodes.Circle001.geometry}
            material={materials["Material.003"]}
            position={[0, -1.81, 0]}
            castShadow={true}
          />
          <mesh
            name="Circle002"
            geometry={nodes.Circle002.geometry}
            material={materials["Material.003"]}
            position={[0, 0.98, 0]}
            castShadow={true}
          />
          <mesh
            name="Sphere001"
            geometry={nodes.Sphere001.geometry}
            material={materials["Material.003"]}
            castShadow={true}
          />
        </group>
      </group>
    </group>
  );
}
