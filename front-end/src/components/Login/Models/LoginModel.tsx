/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/models/login.glb -t
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, OrthographicCamera, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { handlerType } from "../../../pages/Login/Login";

type GLTFResult = GLTF & {
  nodes: {
    Plane_1: THREE.Mesh;
    Plane_2: THREE.Mesh;
    Plane001_1: THREE.Mesh;
    Plane001_2: THREE.Mesh;
    Circle: THREE.Mesh;
    Plane002: THREE.Mesh;
    Circle002: THREE.Mesh;
    Plane003: THREE.Mesh;
    Plane005: THREE.Mesh;
    Circle003: THREE.Mesh;
    Circle004: THREE.Mesh;
    Plane006: THREE.Mesh;
    Plane007: THREE.Mesh;
    Vert: THREE.Mesh;
    Plane009: THREE.Mesh;
    Plane009_1: THREE.Mesh;
  };
  materials: {
    ["Material.002"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    ["Material.004"]: THREE.MeshStandardMaterial;
    ["Material.005"]: THREE.MeshStandardMaterial;
    ["Material.006"]: THREE.MeshStandardMaterial;
    ["Material.007"]: THREE.MeshStandardMaterial;
    ["Material.008"]: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.009"]: THREE.MeshStandardMaterial;
    ["Material.012"]: THREE.MeshPhysicalMaterial;
    ["Material.010"]: THREE.MeshStandardMaterial;
  };
};

type ActionName =
  | "Plane"
  | "Plane.001"
  | "Circle"
  | "Plane.002Action"
  | "Circle.002"
  | "Plane.003"
  | "TrueIsoCamAction"
  | "Area"
  | "Area.001"
  | "Plane.005"
  | "Circle.003"
  | "Circle.004"
  | "Plane.006Action"
  | "Plane.007"
  | "Vert"
  | "Plane.004Action";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export function Model(props: JSX.IntrinsicElements["group"] & handlerType) {
  const group = useRef<THREE.Group | any>();
  const { nodes, materials, animations } = useGLTF(
    "/models/login.glb"
  ) as GLTFResult;
  const { actions } = useAnimations<GLTFActions | any>(animations, group);

  const handleClassNameToggle = props?.handler;

  useEffect(() => {
    // actions["Plane.002Action"]?.play();
    // actions["TrueIsoCamAction"]?.play();
    actions["Plane.006Action"]?.play();
    actions["Plane.004Action"]?.play();
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene" position={[1, 0, 1]}>
        <group
          name="Area"
          position={[0, 8.39, 0]}
          rotation={[-Math.PI / 2, 0, 0]}
          castShadow={true}
          receiveShadow={true}
          onClick={() => {
            handleClassNameToggle();
          }}
        />
        <group
          name="Area001"
          position={[-7.17, 4.4, -4.46]}
          rotation={[-Math.PI / 2, 0, 0]}
          castShadow={true}
          receiveShadow={true}
          onClick={() => {
            handleClassNameToggle();
          }}
        />
        <group name="Plane">
          <mesh
            name="Plane_1"
            geometry={nodes.Plane_1.geometry}
            material={materials["Material.002"]}
            castShadow={true}
            receiveShadow={true}
            onClick={() => {
              handleClassNameToggle();
            }}
          />
          <mesh
            name="Plane_2"
            geometry={nodes.Plane_2.geometry}
            material={materials["Material.003"]}
            castShadow={true}
            receiveShadow={true}
            onClick={() => {
              handleClassNameToggle();
            }}
          />
        </group>
        <group name="Plane001">
          <mesh
            name="Plane001_1"
            geometry={nodes.Plane001_1.geometry}
            material={materials["Material.004"]}
            castShadow={true}
            receiveShadow={true}
            onClick={() => {
              handleClassNameToggle();
            }}
          />
          <mesh
            name="Plane001_2"
            geometry={nodes.Plane001_2.geometry}
            material={materials["Material.005"]}
            castShadow={true}
            receiveShadow={true}
            onClick={() => {
              handleClassNameToggle();
            }}
          />
        </group>
        <mesh
          name="Circle"
          geometry={nodes.Circle.geometry}
          material={materials["Material.006"]}
          position={[-0.2, 0.97, 0]}
          castShadow={true}
          receiveShadow={true}
          onClick={() => {
            handleClassNameToggle();
          }}
        />
        {/* <mesh
          name="Plane002"
          geometry={nodes.Plane002.geometry}
          material={materials["Material.007"]}
          position={[1.8, 2.06, 0]}
        /> */}
        <mesh
          name="Circle002"
          geometry={nodes.Circle002.geometry}
          material={materials["Material.008"]}
          position={[-0.2, 0.97, 0]}
          castShadow={true}
          receiveShadow={true}
          onClick={() => {
            handleClassNameToggle();
          }}
        />
        <mesh
          name="Plane003"
          geometry={nodes.Plane003.geometry}
          material={materials["Material.001"]}
          scale={18.93}
          castShadow={true}
          receiveShadow={true}
        />
        <mesh
          name="Plane005"
          geometry={nodes.Plane005.geometry}
          material={materials["Material.003"]}
          position={[2.51, 0, -1.7]}
          rotation={[0, 0.5, 0]}
          castShadow={true}
          receiveShadow={true}
          onClick={() => {
            handleClassNameToggle();
          }}
        >
          <mesh
            name="Circle003"
            geometry={nodes.Circle003.geometry}
            material={materials["Material.004"]}
            position={[0, 0.25, -0.34]}
            scale={0.89}
            castShadow={true}
            receiveShadow={true}
          />
          <mesh
            name="Circle004"
            geometry={nodes.Circle004.geometry}
            material={materials["Material.004"]}
            position={[0, 0.25, -0.66]}
            scale={0.89}
            castShadow={true}
            receiveShadow={true}
          />
          <mesh
            name="Plane006"
            geometry={nodes.Plane006.geometry}
            material={materials["Material.009"]}
            position={[-0.01, 0.25, 0.6]}
            castShadow={true}
            receiveShadow={true}
          />
        </mesh>
        <mesh
          name="Plane007"
          geometry={nodes.Plane007.geometry}
          material={materials["Material.002"]}
          position={[1.39, 0.16, 1.2]}
          castShadow={true}
          receiveShadow={true}
          onClick={() => {
            handleClassNameToggle();
          }}
        />
        <mesh
          name="Vert"
          geometry={nodes.Vert.geometry}
          material={materials["Material.002"]}
          position={[1.72, 0.16, 1.2]}
          castShadow={true}
          receiveShadow={true}
          onClick={() => {
            handleClassNameToggle();
          }}
        />
        <group name="Plane008" position={[-0.64, 2.82, 0]} scale={1.18}>
          <mesh
            name="Plane009"
            geometry={nodes.Plane009.geometry}
            material={materials["Material.012"]}
            castShadow={true}
            receiveShadow={true}
          />
          <mesh
            name="Plane009_1"
            geometry={nodes.Plane009_1.geometry}
            material={materials["Material.010"]}
            castShadow={true}
            receiveShadow={true}
          />
        </group>
      </group>
    </group>
  );
}

function LoginModel({ handler }: handlerType) {
  return (
    <>
      <Model handler={handler} />
    </>
  );
}

// useGLTF.preload("/models/login.glb");

export default LoginModel;
